---
source: crates/oxc_semantic/tests/integration/cfg.rs
expression: snapshot
input_file: crates/oxc_semantic/tests/integration/cfg_fixtures/do_while_break.js
---
bb0: {
	(BasicBlockFlags(Implicit | Error))
}

bb1: {
	(BasicBlockFlags(Start | Referenced | Shared))
	statement
}

bb2: {
	(BasicBlockFlags(Implicit | Error))
}

bb3: {
	(BasicBlockFlags(Start | Referenced))
	statement
}

bb4: {
	(BasicBlockFlags(Referenced | Finalize))
}

bb5: {
	(BasicBlockFlags(Referenced))
	statement
}

bb6: {
	(BasicBlockFlags(Referenced))
	statement
}

bb7: {
	(BasicBlockFlags(LoopLabel | Referenced | Shared))
	statement
	break
}

bb8: {
	(BasicBlockFlags(Unreachable | Referenced))
	unreachable
}

bb9: {
	(BasicBlockFlags(Unreachable | Referenced | Shared))
	condition
}

bb10: {
	(BasicBlockFlags(Referenced))
}

bb11: {
	(BasicBlockFlags(0x0))
}

bb12: {
	(BasicBlockFlags(0x0))
}

digraph {
    0 [ label = "bb0
(BasicBlockFlags(Implicit | Error))" shape = box]
    1 [ label = "bb1
(BasicBlockFlags(Start | Referenced | Shared))
VariableDeclaration" shape = box]
    2 [ label = "bb2
(BasicBlockFlags(Implicit | Error))" shape = box]
    3 [ label = "bb3
(BasicBlockFlags(Start | Referenced))
TryStatement" shape = box]
    4 [ label = "bb4
(BasicBlockFlags(Referenced | Finalize))" shape = box]
    5 [ label = "bb5
(BasicBlockFlags(Referenced))
BlockStatement" shape = box]
    6 [ label = "bb6
(BasicBlockFlags(Referenced))
DoWhileStatement" shape = box]
    7 [ label = "bb7
(BasicBlockFlags(LoopLabel | Referenced | Shared))
BlockStatement
break" shape = box]
    8 [ label = "bb8
(BasicBlockFlags(Unreachable | Referenced))
unreachable" shape = box]
    9 [ label = "bb9
(BasicBlockFlags(Unreachable | Referenced | Shared))
Condition(true)" shape = box]
    10 [ label = "bb10
(BasicBlockFlags(Referenced))" shape = box]
    11 [ label = "bb11
(BasicBlockFlags(0x0))" shape = box]
    12 [ label = "bb12
(BasicBlockFlags(0x0))" shape = box]
    1 -> 0 [ label="Error(Implicit)", style=dashed, color=red]
    3 -> 2 [ label="Error(Implicit)", style=dashed, color=red]
    1 -> 3 [ label="NewFunction"]
    5 -> 2 [ label="Error(Implicit)", style=dashed, color=red]
    5 -> 4 [ label="Finalize"]
    6 -> 2 [ label="Error(Implicit)", style=dashed, color=red]
    4 -> 6 [ label="Normal"]
    7 -> 2 [ label="Error(Implicit)", style=dashed, color=red]
    8 -> 2 [ label="Error(Implicit)", style=dashed, color=red]
    7 -> 8 [ label="Unreachable", style="dotted"]
    9 -> 2 [ label="Error(Implicit)", style=dashed, color=red]
    10 -> 2 [ label="Error(Implicit)", style=dashed, color=red]
    6 -> 7 [ label="Normal"]
    8 -> 9 [ label="Normal", style="dotted"]
    9 -> 10 [ label="Normal", style="dotted"]
    9 -> 7 [ label="Backedge", style="dotted", color=grey]
    7 -> 10 [ label="Jump", color=green]
    11 -> 2 [ label="Error(Implicit)", style=dashed, color=red]
    3 -> 5 [ label="Normal"]
    10 -> 11 [ label="Join"]
    12 -> 0 [ label="Error(Implicit)", style=dashed, color=red]
    1 -> 12 [ label="Normal"]
}
